from flask import Flask, render_template, request, redirect, url_for
import sqlite3
from pathlib import Path
from datetime import date, datetime

APP_DIR = Path(__file__).parent
DB_PATH = APP_DIR / "expenses.db"

app = Flask(__name__)

# ---------- DB helpers ----------
def get_conn():
    conn = sqlite3.connect(str(DB_PATH))
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS expenses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT NOT NULL,
            category TEXT NOT NULL,
            amount REAL NOT NULL,
            note TEXT,
            payment_method TEXT
        )
    """)
    conn.commit()
    conn.close()

init_db()

# ---------- Categories with icons and multilingual names ----------
CATEGORIES = [
    {"id":"milk","en":"Milk","hi":"‡§¶‡•Ç‡§ß","te":"‡∞™‡∞æ‡∞≤‡±Å","icon":"ü•õ"},
    {"id":"coffee","en":"Coffee/Tea","hi":"‡§ö‡§æ‡§Ø/‡§ï‡•â‡§´‡§º‡•Ä","te":"‡∞ü‡±Ä/‡∞ï‡∞æ‡∞´‡±Ä","icon":"‚òï"},
    {"id":"groceries","en":"Groceries","hi":"‡§ï‡§ø‡§∞‡§æ‡§®‡§æ","te":"‡∞ï‡∞ø‡∞∞‡∞æ‡∞£‡∞æ","icon":"üõí"},
    {"id":"vegetables","en":"Vegetables","hi":"‡§∏‡§¨‡•ç‡§ú‡§º‡§ø‡§Ø‡§æ‡§Å","te":"‡∞ï‡±Ç‡∞∞‡∞ó‡∞æ‡∞Ø‡∞≤‡±Å","icon":"ü•¶"},
    {"id":"water","en":"Water","hi":"‡§™‡§æ‡§®‡•Ä","te":"‡∞®‡±Ä‡∞∞‡±Å","icon":"üíß"},
    {"id":"gas","en":"Cooking Gas","hi":"‡§ó‡•à‡§∏","te":"‡∞ó‡±ç‡∞Ø‡∞æ‡∞∏‡±ç","icon":"üî•"},
    {"id":"travel","en":"Travel","hi":"‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ","te":"‡∞™‡±ç‡∞∞‡∞Ø‡∞æ‡∞£‡∞Ç","icon":"üõµ"},
    {"id":"rent","en":"Rent","hi":"‡§ï‡§ø‡§∞‡§æ‡§Ø‡§æ","te":"‡∞á‡∞Ç‡∞ü‡∞ø ‡∞Ö‡∞¶‡±ç‡∞¶‡±Ü","icon":"üè†"},
    {"id":"electricity","en":"Electricity","hi":"‡§¨‡§ø‡§ú‡§≤‡•Ä","te":"‡∞ï‡∞∞‡±Ü‡∞Ç‡∞ü‡±ç","icon":"‚ö°"},
    {"id":"internet","en":"Internet","hi":"‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü","te":"‡∞á‡∞Ç‡∞ü‡∞∞‡±ç‡∞®‡±Ü‡∞ü‡±ç","icon":"üì∂"},
    {"id":"education","en":"Education","hi":"‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ","te":"‡∞µ‡∞ø‡∞¶‡±ç‡∞Ø","icon":"üéì"},
    {"id":"medical","en":"Medical","hi":"‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ","te":"‡∞µ‡±à‡∞¶‡±ç‡∞Ø‡∞Ç","icon":"‚öï"},
    {"id":"others","en":"Others","hi":"‡§Ö‡§®‡•ç‡§Ø","te":"‡∞á‡∞§‡∞∞","icon":"üìã"}
]

# ---------- Routes ----------
@app.route("/")
def index():
    today = date.today().isoformat()
    month = datetime.now().strftime("%Y-%m")

    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT * FROM expenses ORDER BY date DESC, id DESC")
    expenses = cur.fetchall()

    total_all = sum(row['amount'] for row in expenses) if expenses else 0

    daily_total = conn.execute(
        "SELECT SUM(amount) FROM expenses WHERE date=?", (today,)
    ).fetchone()[0] or 0

    monthly_total = conn.execute(
        "SELECT SUM(amount) FROM expenses WHERE strftime('%Y-%m', date)=?", (month,)
    ).fetchone()[0] or 0

    conn.close()

    return render_template(
        "index.html",
        expenses=expenses,
        total=total_all,
        daily_total=daily_total,
        monthly_total=monthly_total,
        categories=CATEGORIES,
        today=today
    )

@app.route("/add", methods=["POST"])
def add_expense():
    dt = request.form.get("date") or date.today().isoformat()
    category = request.form.get("category")
    amount = request.form.get("amount", "0")
    note = request.form.get("note")
    payment = request.form.get("payment")

    try:
        amt = float(amount)
    except:
        amt = 0.0

    if not category or amt <= 0:
        return "Category and positive amount required", 400

    conn = get_conn()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO expenses (date, category, amount, note, payment_method) VALUES (?, ?, ?, ?, ?)",
        (dt, category, amt, note, payment)
    )
    conn.commit()
    conn.close()
    return redirect(url_for("index"))

@app.route("/delete/<int:expense_id>", methods=["POST"])
def delete_expense(expense_id):
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("DELETE FROM expenses WHERE id = ?", (expense_id,))
    conn.commit()
    conn.close()
    return redirect(url_for("index"))

if __name__ == "__main__":
    app.run(debug=True)
